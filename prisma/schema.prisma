// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Currency {
  CLP
}

model MoneyAccount {
  id                String        @id @default(cuid())
  name              String
  payerTransactions Transaction[] @relation("PayerAccount")
  payeeTransactions Transaction[] @relation("PayeeAccount")
}

model TransactionCategory {
  id               String                @id @default(cuid())
  name             String
  parentCategoryId String?
  parentCategory   TransactionCategory?  @relation("ParentCategory", fields: [parentCategoryId], references: [id])
  childCategories  TransactionCategory[] @relation("ParentCategory")
  transactions     Transaction[]         @relation("TransactionCategory")
}

model Transaction {
  id                         String               @id @default(cuid())
  payerAccountId             String
  payeeAccountId             String
  amount                     Float
  currency                   Currency             @default(CLP)
  categoryId                 String?
  originalDescription        String
  description                String?
  accountableDate            DateTime?
  monthly                    Boolean              @default(false)
  previousMonthTransactionId String?              @unique
  payerAccount               MoneyAccount         @relation("PayerAccount", fields: [payerAccountId], references: [id])
  payeeAccount               MoneyAccount         @relation("PayeeAccount", fields: [payeeAccountId], references: [id])
  category                   TransactionCategory? @relation("TransactionCategory", fields: [categoryId], references: [id])
  previousMonthTransaction   Transaction?         @relation("PreviousMonthTransaction", fields: [previousMonthTransactionId], references: [id])
  nextMonthTransaction       Transaction?         @relation("PreviousMonthTransaction")
}

model Debt {
  id                      String   @id @default(cuid())
  debtTransactionId       String
  settlementTransactionId String?
  debtor                  String
  creditor                String
  amount                  Float
  currency                Currency @default(CLP)
}
